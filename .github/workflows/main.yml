name: "cache-test build"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CACHE: invalidate-cache-18
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: cache-test:build

      # Step 4: Restore Golangci-lint cache (restore from main branch for PRs and pushes to main)
      - name: Restore Golangci-lint cache
        uses: actions/cache@v3
        id: golangci-lint-cache-restore
        with:
          path: cache-golangci-lint
          key: ${{ runner.os }}-${{ hashFiles('.go-builder/.golangci.yml') }}-main  # Always restore from main cache
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('.go-builder/.golangci.yml') }}-
            ${{ runner.os }}-

      # Step 5: Restore Go mod cache (restore from main branch for PRs and pushes to main)
      - name: Restore Go mod cache
        uses: actions/cache@v3
        id: go-mod-cache-restore
        with:
          path: go-pkg-mod
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}-main  # Always restore from main cache
          restore-keys: |
            ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-mod-

      # Step 6: Restore Go build cache (restore from main branch for PRs and pushes to main)
      - name: Restore Go build cache
        uses: actions/cache@v3
        id: go-build-cache-restore
        with:
          path: cache-go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-main  # Always restore from main cache
          restore-keys: |
            ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-go-build-

      # Step 7: Inject cache into Docker build
      - name: Inject cache into Docker
        uses: reproducible-containers/buildkit-cache-dance@v3.1.0
        with:
          cache-map: |
            {
              "cache-golangci-lint": "/root/.cache/golangci-lint",
              "go-pkg-mod": "/go/pkg/mod",
              "cache-go-build": "/root/.cache/go-build"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      # Docker login
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      # Prepare build step
      - name: Prepare build
        run: docker buildx build -f Dockerfile.build --target prepare --cache-from=type=gha --cache-to=type=gha,mode=max .

      # Sanity check build step
      - name: Sanity check build
        run: docker buildx build -f Dockerfile.build --target sanity-check --cache-from=type=gha --cache-to=type=gha,mode=max .

      # Final build step
      - name: Final build
        run: docker buildx build -f Dockerfile.build --target build --cache-from=type=gha --cache-to=type=gha,mode=max .

      # Step 13: Save cache for Go build, Go mod, and golangci-lint (only for push to main)
      # Save Golangci-lint cache only on push to main
      - name: Save Golangci-lint cache
        uses: actions/cache@v3
        with:
          path: cache-golangci-lint
          key: ${{ runner.os }}-${{ hashFiles('.go-builder/.golangci.yml') }}-${{ github.sha }}
        if: github.ref == 'refs/heads/main'

      # Save Go mod cache only on push to main
      - name: Save Go mod cache
        uses: actions/cache@v3
        with:
          path: go-pkg-mod
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}-${{ github.sha }}
        if: github.ref == 'refs/heads/main'

      # Save Go build cache only on push to main
      - name: Save Go build cache
        uses: actions/cache@v3
        with:
          path: cache-go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}-${{ github.sha }}
        if: github.ref == 'refs/heads/main'

      # Release step (push to DockerHub) - Only on push to main
      - name: Release
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: runtime
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
